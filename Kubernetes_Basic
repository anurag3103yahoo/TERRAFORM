**************************************  Kubernetes definition ***************************************************
Kubernetes is an open source container orchestration engine for automating deployment, scaling, and management of containerized applications. The open source project is hosted by the Cloud Native Computing Foundation (CNCF).

*******************************************************************************************************************

*************************** Installation **************************************************************************
Install kubectl on Windows : 
		1. Install kublectel
		2. install scoop from powershell 
		3. Install minikube 
Install Kubectl on linux :
		1. sudo yum install -y kubectl
		2. kubectl cluster-info
		3. Install kubectl convert plugin 

*************************************** About Kubernetes ***********************************************************
## Kubernetes is a portable, extensible, open source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.

## It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available.

## The name Kubernetes originates from Greek, meaning helmsman or pilot. K8s as an abbreviation results from counting the eight letters between the "K" and the "s". 

##Google open-sourced the Kubernetes project in 2014. 

## Kubernetes combines over 15 years of Google's experience running production workloads at scale with best-of-breed ideas and practices from the community. 

## Histroy of Kubernetes :

a. Traditional deployment era: 
				Early on, organizations ran applications on physical servers.if multiple applications run on a physical server, there can be instances where one application would take up most of the resources, and as a result, the other applications would underperform. 
b. Virtualized deployment era: 
				 It allows you to run multiple Virtual Machines (VMs) on a single physical server's CPU.Virtualization allows better utilization of resources in a physical server and allows better scalability because an application can be added or updated easily, reduces hardware costs, and much more.
c. Container deployment era: 
				Containers are similar to VMs, but they have relaxed isolation properties to share the Operating System (OS) among the applications. Therefore, containers are considered lightweight. Similar to a VM, a container has its own filesystem, share of CPU, memory, process space, and more. As they are decoupled from the underlying infrastructure, they are portable across clouds and OS distributions.

Q: Why you need Kubernetes and what it can do?
			Ans : Kubernetes provides you with a framework to run distributed systems resiliently. It takes care of scaling and failover for your application, provides deployment patterns, and more.
			Kubernetes provides us :
			a. Service discovery and load balancing
			b. Storage orchestration
			c. Automated rollouts and rollbacks-  you can automate Kubernetes to create new containers for your deployment, remove existing containers and adopt all their resources to the new container.
			d. Automatic bin packing  : Kubernetes can fit containers onto your nodes to make the best use of your resources.
			e. Self-healing Kubernetes restarts containers that fail, replaces containers, kills containers that    don't respond to your user-defined health check,
			f. Secret and configuration management Kubernetes lets you store and manage sensitive information, such as passwords, OAuth tokens, and SSH keys. 
			
Q: What Kubernetes is not ?
			Ans: Kubernetes is not a traditional, all-inclusive PaaS (Platform as a Service) system. Kubernetes is not monolithic. 
			Kubernetes:
				a. Does not limit the types of applications supported
				b. Does not provide application-level services, such as middleware
				c. Does not dictate logging, monitoring, or alerting solutions
				d. Does not provide nor adopt any comprehensive machine configuration, maintenance, management, or self-healing systems

**************************************** Kubernetes Components **************************************************
## When you deploy Kubernetes, you get a cluster.
## A Kubernetes cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node.
##The control plane manages the worker nodes and the Pods in the cluster.Control plane components can be run on any machine in the cluster. 
## Components  needed to have for a complete and working Kubernetes cluster (Control Plane Components ):
	a. kube-apiserver  : 
			The API server is a component of the Kubernetes control plane that exposes the Kubernetes API. The API server is the front end for the Kubernetes control plane.The main implementation of a Kubernetes API server is kube-apiserver. 
	b. etcd : 
			Consistent and highly-available key value store used as Kubernetes' backing store for all cluster data.
	c. kube-scheduler :
			Control plane component that watches for newly created Pods with no assigned node, and selects a node for them to run on.
	d. kube-controller-manager: 
			Control plane component that runs controller processes.
	e. cloud-controller-manager: 
			A Kubernetes control plane component that embeds cloud-specific control logic. 
## Node Components :
	a. kubelet:
			An agent that runs on each node in the cluster. It makes sure that containers are running in a Pod.The kubelet takes a set of PodSpecs that are provided through various mechanisms and ensures that the containers described in those PodSpecs are running and healthy
	b. kube-proxy:
			kube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept.kube-proxy maintains network rules on nodes. These network rules allow network communication to your Pods from network sessions inside or outside of your cluster.
	c. Container runtime:
			The container runtime is the software that is responsible for running containers.Kubernetes supports container runtimes such as containerd, CRI-O, and any other implementation of the Kubernetes CRI (Container Runtime Interface).
			
## Kubernetes objects are persistent entities in the Kubernetes system. Kubernetes uses these entities to represent the state of your cluster.
##A Kubernetes object is a "record of intent"--once you create the object, the Kubernetes system will constantly work to ensure that object exists. 
##To work with Kubernetes objects--whether to create, modify, or delete them--you'll need to use the Kubernetes API
## In the .yaml file for the Kubernetes object you want to create, you'll need to set values for the following fields:

apiVersion - Which version of the Kubernetes API you're using to create this object
kind - What kind of object you want to create
metadata - Data that helps uniquely identify the object, including a name string, UID, and optional namespace
spec - What state you desire for the object

************************ Kubernetes Object Management **************************************************
## The kubectl command-line tool supports several different ways to create and manage Kubernetes objects.
##  A Kubernetes object should be managed using only one technique. Mixing and matching techniques for the same object results in undefined behavior.
##  Create delete object :
a. creating a Deployment object:
			kubectl create deployment nginx --image nginx
			
b. Create the objects defined in a configuration file:
			kubectl create -f nginx.yaml
			
c. Delete the objects defined in two configuration files:
			kubectl delete -f nginx.yaml -f redis.yaml

d.Update the objects defined in a configuration file by overwriting the live configuration:
			kubectl replace -f nginx.yaml
			
e. some objects compare :
			kubectl diff -f configs/
			kubectl apply -f configs/
			kubectl diff -R -f configs/
			kubectl apply -R -f configs/
			
## Each object in your cluster has a Name that is unique for that type of resource. Every Kubernetes object also has a UID that is unique across your whole cluster.

##In Kubernetes, namespaces provides a mechanism for isolating groups of resources within a single cluster.
## Namespaces are a way to divide cluster resources between multiple users (via resource quota).
##  list the current namespaces in a cluster using
			kubectl get namespace
			kubectl describe namespaces <name>  -- deatis of namespaces 
			kubectl create -f https://k8s.io/examples/admin/namespace-prod.json --create  production namespace
			kubectl get namespaces --show-labels    ----- to show the labels
			kubectl create deployment snowflake --image=registry.k8s.io/serve_hostname  -n=development --replicas=2
			kubectl get deployment -n=development
			kubectl get pods -l app=snowflake -n=development
			
*********** Labels and Selectors*****
## Labels are key/value pairs that are attached to objects, such as pods.
## Labels are intended to be used to specify identifying attributes of objects that are meaningful and relevant to users, but do not directly imply semantics to the core system.

## Kubernetes annotations to attach arbitrary non-identifying metadata to objects.

******* Field Selectors*************
## Field selectors let you select Kubernetes resources based on the value of one or more resource fields. Here are some examples of field selector queries:

metadata.name=my-service
metadata.namespace!=default
status.phase=Pending

##This kubectl command selects all Pods for which the value of the status.phase field is Running:
kubectl get pods --field-selector status.phase=Running

##As with label and other selectors, field selectors can be chained together as a comma-separated list.
		kubectl get pods --field-selector=status.phase!=Running,spec.restartPolicy=Always
		kubectl get statefulsets,services --all-namespaces --field-selector metadata.namespace!=default
		
******** Finalizers*********
##Finalizers are namespaced keys that tell Kubernetes to wait until specific conditions are met before it fully deletes resources marked for deletion. 
## Finalizers alert controllers to clean up resources the deleted object owned.

***********Owners and Dependents**********
In Kubernetes, some objects are owners of other objects. For example, a ReplicaSet is the owner of a set of Pods. These owned objects are dependents of their owner.



==================================Cluster Architecture =============================================================
Nodes:
## Kubernetes runs your workload by placing containers into Pods to run on Nodes
## A node may be a virtual or physical machine, depending on the cluster.
## Each node is managed by the control plane and contains the services necessary to run Pods.Typically you have several nodes in a cluster
## There are two main ways to have Nodes added to the API server:
	a. The kubelet on a node self-registers to the control plane
	b. You (or another human user) manually add a Node object
## Kubernetes creates a Node object internally (the representation). 
##  Kubernetes checks that a kubelet has registered to the API server that matches the metadata.name field of the Node. If the node is healthy (i.e. all necessary services are running), then it is eligible to run a Pod.
 
********** Node name uniqueness****
## The name identifies a Node. Two Nodes cannot have the same name at the same time.


****** Node status***
## A Node's status contains the following information:

	Addresses
	Conditions
	Capacity and Allocatable
	Info
	
##  use kubectl to view a Node's status and other details:
		kubectl describe node <insert-node-name-here>
		
##  Capacity and Allocatable  : Describes the resources available on the node: CPU, memory, and the maximum number of pods that can be scheduled onto the node.

## Info : Describes general information about the node, such as kernel version, Kubernetes version 
## Heartbeats : Heartbeats, sent by Kubernetes nodes, help your cluster determine the availability of each node, and to take action when failures are detected.
##  Node controller  : The node controller is a Kubernetes control plane component that manages various aspects of nodes.The node controller has multiple roles in a node's life.
## Resource capacity tracking: Node objects track information about the Node's resource capacity: for example, the amount of memory available and the number of CPUs.

************************Communication between Nodes and the Control Plane**********************************
## Kubernetes has a "hub-and-spoke" API pattern.
## All API usage from nodes (or the pods they run) terminates at the API server. 
## Nodes should be provisioned with the public root certificate for the cluster such that they can connect securely to the API server along with valid client credentials.
## Pods that wish to connect to the API server can do so securely by leveraging a service account so that Kubernetes will automatically inject the public root certificate and a valid bearer token into the pod when it is instantiated.
## The control plane components also communicate with the API server over the secure port.
## There are two primary communication paths from the control plane (the API server) to the nodes. The first is from the API server to the kubelet process which runs on each node in the cluster.
##  The second is from the API server to any node, pod, or service through the API server's proxy functionality

---Controllers-------------------
##In Kubernetes, controllers are control loops that watch the state of your cluster, then make or request changes where needed. Each controller tries to move the current cluster state closer to the desired state.
## A controller tracks at least one Kubernetes resource type. 
## The controller(s) for that resource are responsible for making the current state come closer to that desired state.
## The Job controller is an example of a Kubernetes built-in controller. Built-in controllers manage state by interacting with the cluster API server.
## Job is a Kubernetes resource that runs a Pod, or perhaps several Pods, to carry out a task and then stop.
## Once scheduled, Pod objects become part of the desired state for a kubelet
## once the work is done for a Job, the Job controller updates that Job object to mark it Finished..
## 

------Cloud Controller Manager ------------
## The cloud-controller-manager is a Kubernetes control plane component that embeds cloud-specific control logic. 
## The cloud controller manager lets you link your cluster into your cloud provider's API, and separates out the components that interact with that cloud platform from components that only interact with your cluster.
## The cloud-controller-manager is structured using a plugin mechanism that allows different cloud providers to integrate their platforms with Kubernetes
## The cloud controller manager runs in the control plane as a replicated set of processes
##  Each cloud-controller-manager implements multiple controllers in a single process.
## Node controller:
				The node controller is responsible for updating Node objects when new servers are created in your cloud infrastructure. The node controller obtains information about the hosts running inside your tenancy with the cloud provider.
## Route controller :
				The route controller is responsible for configuring routes in the cloud appropriately so that containers on different nodes in your Kubernetes cluster can communicate with each other.
## Service controller:
				Services integrate with cloud infrastructure components such as managed load balancers, IP addresses, network packet filtering, and target health checking. The service controller interacts with your cloud provider's APIs to set up load balancers and other infrastructure components when you declare a Service resource that requires them.
				The service controller listens to Service object Create, Update and Delete events and then configures Endpoints for those Services appropriately.
-------cgroup v2----
## On Linux, control groups constrain resources that are allocated to processes.
##The kubelet and the underlying container runtime need to interface with cgroups to enforce resource mangement for pods and containers which includes cpu/memory requests and limits for containerized workloads.
## There are two versions of cgroups in Linux: cgroup v1 and cgroup v2.
## cgroup v2 is the next version of the Linux cgroup API. 
## cgroup v2 provides a unified control system with enhanced resource management capabilities.
## cgroup v2 offers several improvements over cgroup v1, such as the following:

Single unified hierarchy design in API
Safer sub-tree delegation to containers
Newer features like Pressure Stall Information
Enhanced resource allocation management and isolation across multiple resources
Unified accounting for different types of memory allocations (network memory, kernel memory, etc)
Accounting for non-immediate resource changes such as page cache write backs


------Container Runtime Interface (CRI)
## The CRI is a plugin interface which enables the kubelet to use a wide variety of container runtimes, without having a need to recompile the cluster components.
## 	The Container Runtime Interface (CRI) is the main protocol for the communication between the kubelet and Container Runtime.
## The Kubernetes Container Runtime Interface (CRI) defines the main gRPC protocol for the communication between the cluster components kubelet and container runtime
## When upgrading Kubernetes, then the kubelet tries to automatically select the latest CRI version on restart of the component. 

 --- Garbage Collection
## Garbage collection is a collective term for the various mechanisms Kubernetes uses to clean up cluster resources. This allows the clean up of resources like the following:
Terminated pods
Completed Jobs
Objects without owner references
Unused containers and container images
Dynamically provisioned PersistentVolumes with a StorageClass reclaim policy of Delete
Stale or expired CertificateSigningRequests (CSRs)

## Cascading deletion :
				Kubernetes checks for and deletes objects that no longer have owner references, like the pods left behind when you delete a ReplicaSet. When you delete an object, you can control whether Kubernetes deletes the object's dependents automatically, in a process called cascading deletion. 

============================================= Containers ==========================================================
## Each container that you run is repeatable; the standardization from having dependencies included means that you get the same behavior wherever you run it.
## Containers decouple applications from underlying host infrastructure. This makes deployment easier in different cloud or OS environments.
## Containers decouple applications from underlying host infrastructure. This makes deployment easier in different cloud or OS environments.
## By design, a container is immutable: you cannot change the code of a container that is already running. 
##  If you have a containerized application and want to make changes, you need to build a new image that includes the change, then recreate the container to start from the updated image.
##The container runtime is the software that is responsible for running containers.Kubernetes supports container runtimes such as containerd, CRI-O, and any other implementation of the Kubernetes CRI (Container Runtime Interface)

----Images
## A container image represents binary data that encapsulates an application and all its software dependencies..
## Container images are executable software bundles that can run standalone and that make very well defined assumptions about their runtime environment.
## 
----Container Environment
## The Kubernetes Container environment provides several important resources to Containers:

A filesystem, which is a combination of an image and one or more volumes.
Information about the Container itself.
Information about other objects in the cluster

-----Runtime Class
## RuntimeClass is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers
##
----- Container Lifecycle Hooks\
## The hooks enable Containers to be aware of events in their management lifecycle and run code implemented in a handler when the corresponding lifecycle hook is executed
## There are two hooks that are exposed to Containers:

PostStart

This hook is executed immediately after a container is created. However, there is no guarantee that the hook will execute before the container ENTRYPOINT. No parameters are passed to the handler.

PreStop

This hook is called immediately before a container is terminated due to an API request or management event such as a liveness/startup probe failure, preemption, resource contention and others. 

----Workloads
## A workload is an application running
 on Kubernetes. Whether your workload is a single component or several that work together, on Kubernetes you run it inside a set of pods.
## in Kubernetes, a Pod represents a set of running containers on your cluster.
## Kubernetes provides several built-in workload resources:
	Deployment and ReplicaSet : 
					(replacing the legacy resource ReplicationController). Deployment is a good fit for managing a stateless application workload on your cluster, where any Pod in the Deployment is interchangeable and can be replaced if needed.
## DaemonSet defines Pods that provide node-local facilities. These might be fundamental to the operation of your cluster, such as a networking helper tool, or be part of an add-on.

## Job and CronJob define tasks that run to completion and then stop. Jobs represent one-off tasks, whereas CronJobs recur according to a schedule.

##Pods: 
	Pods are the smallest deployable units of computing that you can create and manage in Kubernetes.
## A Pod (as in a pod of whales or pea pod) is a group of one or more containers, with shared storage and network resources, and a specification for how to run the containers.
## 




			
